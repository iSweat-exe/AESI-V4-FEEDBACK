name: Mirror issues to DEV

on:
  issues:
    types: [opened, reopened, closed]
  issue_comment:
    types: [created]

jobs:
  mirror_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Mirror issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const owner = "iSweat-exe";
            const repo = "AESI-V4-DEV";

            // ID unique pour suivre l'issue dupliquÃ©e
            const MIRROR_ID = `[MIRROR_ID:ISSUE-${issue.number}]`;

            const bodyWithID = `${MIRROR_ID}\n\nOrigine : [#${issue.number}](${issue.html_url})\n\n---\n\n${issue.body || ""}`;

            // Cherche si l'issue existe dÃ©jÃ 
            const existingIssues = await github.rest.issues.listForRepo({ owner, repo, state: "all" });
            const existing = existingIssues.data.find(i => i.body?.includes(MIRROR_ID));

            const payload = {
              owner,
              repo,
              title: issue.title,
              body: bodyWithID,
              labels: issue.labels.map(l => l.name),
              assignees: issue.assignees.map(a => a.login),
              milestone: issue.milestone ? issue.milestone.number : null
            };

            if (existing) {
              // Met Ã  jour l'issue existante
              await github.rest.issues.update({
                ...payload,
                issue_number: existing.number,
                state: issue.state === "closed" ? "closed" : "open"
              });
            } else {
              // CrÃ©e une nouvelle issue
              await github.rest.issues.create(payload);
            }

  mirror_comments:
    runs-on: ubuntu-latest
    needs: mirror_issue
    steps:
      - name: Mirror comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            if (!context.payload.comment) return;

            const comment = context.payload.comment;
            const issue = context.payload.issue;
            const owner = "iSweat-exe";
            const repo = "AESI-V4-DEV";
            const MIRROR_ID = `[MIRROR_ID:ISSUE-${issue.number}]`;

            // Cherche l'issue dupliquÃ©e
            const existingIssues = await github.rest.issues.listForRepo({ owner, repo, state: "all" });
            const existing = existingIssues.data.find(i => i.body?.includes(MIRROR_ID));
            if (!existing) return;

            // VÃ©rifie si le commentaire existe dÃ©jÃ 
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: existing.number });
            if (!comments.data.some(c => c.body.includes(comment.id.toString()))) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: existing.number,
                body: `ğŸ’¬ [Commentaire original #${comment.id} de #${issue.number}]\n\n${comment.body}`
              });
            }
